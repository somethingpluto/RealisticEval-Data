var BITS_IN_BYTE = 8;

function BitArray(sizeInBits) {
    this.length = sizeInBits;

    // Create the ArrayBuffer for the BitArray
    var sizeInBytes = Math.floor((sizeInBits - 1) / BITS_IN_BYTE);
    var remainingBits = sizeInBits - (sizeInBytes * BITS_IN_BYTE)
    if (sizeInBits > 0) {
        var extraByte = 1;
    } else {
        var extraByte = 0;
    }

    var buffer = new ArrayBuffer(sizeInBytes + extraByte);

    var errorIfIndexOutOfBounds = function (index) {
        if (index > this.length - 1) {
            throw 'BitArray index out of range';
        }
    }

    var getByteData = function (index) {
        var byteToFetch = Math.floor(index / BITS_IN_BYTE);

        // Add one to zero index the array
        var remainingBits = index - (byteToFetch * BITS_IN_BYTE) + 1;

        return { byte: buffer[byteToFetch], byteIndex: byteToFetch, remainingBits: remainingBits };
    }

    this.getBit = function (index) {
        errorIfIndexOutOfBounds(index);

        var byteData = getByteData(index);

        return byteData.byte >> (BITS_IN_BYTE - byteData.remainingBits) & 1;
    }

    this.setBit = function (index, value) {
        errorIfIndexOutOfBounds(index);

        var byteData = getByteData(index);
        var byte = byteData.byte;
        var remainingBits = byteData.remainingBits;

        if (value) {
            // Set bit to 1
            byte |= (1 << (BITS_IN_BYTE - remainingBits));
        } else {
            // Set bit to 0
            byte &= (1 << (BITS_IN_BYTE - remainingBits));
        }

        buffer[byteData.byteIndex] = byte;

        return value ? 1 : 0;
    }

    this.getBuffer = function () {
        return buffer;
    }

    return this;
}

module.exports = BitArray;

