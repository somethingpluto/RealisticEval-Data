Certainly! Here’s the equivalent C++ test class using the Catch2 testing framework. We will preserve the functionality and logic of the tests, making any necessary adjustments for language differences between Python and C++.

First, make sure you have Catch2 installed and included in your project. You can include Catch2 by adding the header files and ensuring your build system includes the necessary paths.

Here’s the C++ code:

```cpp
#include <catch2/catch_test_macros.hpp>
#include <fstream>
#include <sstream>
#include <vector>
#include <map>
#include <regex>

// Function to extract title, author, and year from a BibTeX file
std::vector<std::map<std::string, std::string>> extract_bib_info(const std::string& bib_file);

// Helper function to extract information from a single entry
std::map<std::string, std::string> extract_entry(const std::string& entry, 
                                                 const std::regex& title_pattern, 
                                                 const std::regex& author_pattern, 
                                                 const std::regex& year_pattern);

TEST_CASE("Test extraction from a valid BibTeX entry", "[extract_bib_info]") {
    std::string mock_bib = R"(@article{sample2024,
  author = {John Doe and Jane Smith},
  title = {A Comprehensive Study on AI},
  year = {2024}
)}";

    std::istringstream mock_stream(mock_bib);
    std::vector<std::map<std::string, std::string>> result;
    {
        std::fstream file("dummy.bib");
        file.rdbuf(mock_stream.rdbuf());
        result = extract_bib_info("dummy.bib");
    }

    std::vector<std::map<std::string, std::string>> expected = {
        {{"title", "A Comprehensive Study on AI"}, {"author", "John Doe and Jane Smith"}, {"year", "2024"}}
    };

    REQUIRE(result == expected);
}

TEST_CASE("Test extraction from multiple BibTeX entries", "[extract_bib_info]") {
    std::string mock_bib = R"(
@article{sample2024,
  author = {John Doe},
  title = {A Comprehensive Study on AI},
  year = {2024}
}
@article{sample2023,
  author = {Jane Smith},
  title = {Deep Learning Techniques},
  year = {2023}
})";

    std::istringstream mock_stream(mock_bib);
    std::vector<std::map<std::string, std::string>> result;
    {
        std::fstream file("dummy.bib");
        file.rdbuf(mock_stream.rdbuf());
        result = extract_bib_info("dummy.bib");
    }

    std::vector<std::map<std::string, std::string>> expected = {
        {{"title", "A Comprehensive Study on AI"}, {"author", "John Doe"}, {"year", "2024"}},
        {{"title", "Deep Learning Techniques"}, {"author", "Jane Smith"}, {"year", "2023"}}
    };

    REQUIRE(result == expected);
}

TEST_CASE("Test extraction when some fields are missing", "[extract_bib_info]") {
    std::string mock_bib = R"(@article{sample2024,
  author = {John Doe},
  title = {Title Missing Year}
)}";

    std::istringstream mock_stream(mock_bib);
    std::vector<std::map<std::string, std::string>> result;
    {
        std::fstream file("dummy.bib");
        file.rdbuf(mock_stream.rdbuf());
        result = extract_bib_info("dummy.bib");
    }

    std::vector<std::map<std::string, std::string>> expected = {
        {{"title", "Title Missing Year"}, {"author", "John Doe"}, {"year", ""}}
    };

    REQUIRE(result == expected);
}

TEST_CASE("Test extraction from an empty BibTeX file", "[extract_bib_info]") {
    std::string mock_bib = "";

    std::istringstream mock_stream(mock_bib);
    std::vector<std::map<std::string, std::string>> result;
    {
        std::fstream file("dummy.bib");
        file.rdbuf(mock_stream.rdbuf());
        result = extract_bib_info("dummy.bib");
    }

    std::vector<std::map<std::string, std::string>> expected = {};

    REQUIRE(result == expected);
}

TEST_CASE("Test extraction from a badly formatted BibTeX entry", "[extract_bib_info]") {
    std::string mock_bib = R"(@article{sample2024,
  author = John Doe,
  title = {Title Without Braces},
  year = 2024
)}";

    std::istringstream mock_stream(mock_bib);
    std::vector<std::map<std::string, std::string>> result;
    {
        std::fstream file("dummy.bib");
        file.rdbuf(mock_stream.rdbuf());
        result = extract_bib_info("dummy.bib");
    }

    std::vector<std::map<std::string, std::string>> expected = {
        {{"title", "Title Without Braces"}, {"author", ""}, {"year", ""}}
    };

    REQUIRE(result == expected);

// Function to extract title, author, and year from a BibTeX file
std::vector<std::map<std::string, std::string>> extract_bib_info(const std::string& bib_file) {
    std::vector<std::map<std::string, std::string>> articles;

    // Regular expressions to match title, author, and year
    std::regex title_pattern(R"(title\s*=\s*{([^}]*)})", std::regex_constants::icase);
    std::regex author_pattern(R"(author\s*=\s*{([^}]*)})", std::regex_constants::icase);
    std::regex year_pattern(R"(year\s*=\s*{([^}]*)})", std::regex_constants::icase);

    try {
        std::ifstream file(bib_file);
        if (!file.is_open()) {
            throw std::runtime_error("Error: The file '" + bib_file + "' was not found.");
        }

        std::stringstream buffer;
        buffer << file.rdbuf();
        std::string content = buffer.str();

        // Split the content into individual entries based on '@'
        std::istringstream iss(content);
        std::string entry;
        while (std::getline(iss, entry, '@')) {
            if (!entry.empty()) {
                articles.push_back(extract_entry(entry, title_pattern, author_pattern, year_pattern));
            }
        }

    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
    }

    return articles;
}

// Helper function to extract information from a single entry
std::map<std::string, std::string> extract_entry(const std::string& entry, 
                                                 const std::regex& title_pattern, 
                                                 const std::regex& author_pattern, 
                                                 const std::regex& year_pattern) {
    std::smatch match;
    std::map<std::string, std::string> info;

    if (std::regex_search(entry, match, title_pattern)) {
        info["title"] = match[1];
    } else {
        info["title"] = "";
    }

    if (std::regex_search(entry, match, author_pattern)) {
        info["author"] = match[1];
    } else {
        info["author"] = "";
    }

    if (std::regex_search(entry, match, year_pattern)) {
        info["year"] = match[1];
    } else {
        info["year"] = "";
    }

    return info;
}

int main() {
    // Run all the tests
    return Catch::Session().run();
}
```

### Explanation:
1. **Headers**: Include necessary headers (`<catch2/catch_test_macros.hpp>`, `<fstream>`, `<sstream>`, `<vector>`, `<map>`, `<regex>`).
2. **Catch2 Tests**: Define test cases using `TEST_CASE` macros.
3. **Mock File Stream**: Use `std::istringstream` to simulate file input.
4. **Function Definitions**: Define the `extract_bib_info` and `extract_entry` functions to perform the actual extraction.
5. **Assertions**: Use `REQUIRE` for assertions to ensure the expected results match the actual results.
6. **Main Function**: Run all the tests using `Catch::Session().run()`.

This C++ code preserves the functionality and logic of the Python tests, ensuring that the tests cover the same scenarios and produce the expected results.